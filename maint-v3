#!/usr/bin/env perl
use Mojolicious::Lite;

my $is_test = $ENV{TEST};

## in which we conflate the controller and *two* models. This is a
## step backward almost to the beginning, but helps us observe the
## common work the models need to do. We also have the benefit of
## having the application API already designed for us, which colors
## our perception of the application (in a good way in this case).
use DBI;

my $dbh = DBI->connect("dbi:SQLite:dbname=:memory","","");
$dbh->do(<<_SQL_);
CREATE TABLE IF NOT EXISTS tickets (
  ticket INTEGER PRIMARY KEY,
  building TEXT,
  item TEXT,
  id TEXT,
  description TEXT,
  expectation TEXT
)
_SQL_

my $mem = {};

get '/tickets/:ticket_id' => sub {
    my $c = shift;

    my $ticket;

    ## 1) 'if' blocks give off a strong code smell...
    if ($is_test) {
        $ticket = $mem->{$c->param('ticket_id')} // {};
    }

    else {
        my $sth = $dbh->prepare(qq!SELECT * FROM tickets WHERE ticket = ?!);
        $sth->execute($c->param('ticket_id'));
        $ticket = $sth->fetchrow_hashref;
        $sth->finish;
    }

    unless ($ticket->{ticket}) {
        $c->render(json => { error => "Ticket not found" }, status => 404);
        return;
    }

    $c->render(json => $ticket, status => 200);
};

post '/tickets' => sub {
    my $c   = shift;
    my $req = $c->req->json;

    my $ticket_id;

    ## 2) this clearly feels like we violated the Open-Closed
    ## principle/polymorphism. What we need is an "interface" that
    ## both models can consume. An interface is defined by its use
    ## case, not its implementation.
    if ($is_test) {
        my ($id) = sort { $b <=> $a } keys %$mem;
        $id += 1;
        $req->{ticket} = $id;
        $mem->{$id} = $req;
        $ticket_id = $id;
    }

    else {
        my @fields = qw/building item id description expectation/;
        my $fields = join ',' => @fields;
        my $places = join ',' => ('?') x @fields;

        my $sth = $dbh->prepare(qq!INSERT INTO tickets ($fields) VALUES ($places)!);
        $sth->execute(@{$req}{@fields});

        if ($dbh->errstr) {
            $c->app->log->error($dbh->errstr);
            $c->render(json => { error => "Unable to create ticket" }, status => 400);
            return;
        }

        $ticket_id = $dbh->last_insert_id(undef, undef, "tickets", "ticket");
    }

    $c->render(
        json   => { message => "Request received", ticket => $ticket_id, url => $c->url_for("/tickets/$ticket_id")->to_abs },
        status => 201);
};

app->start;
