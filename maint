#!/usr/bin/env perl
use Mojolicious::Lite;

{
    package Mocky::Mockerson;
    use Mojo::Base -base;

    has ticket => sub { int rand(89_999) + 10000 };

    sub create_ticket { shift->ticket }
    sub find_ticket { { foo => "bar" } }
}

{
    package In::Memory;
    use Mojo::Base -base;

    my $tickets = {};
    has tickets => sub { $tickets };

    sub next_id { state $last_id = 10_000; $last_id++ }

    sub create_ticket {
        my $m  = shift;
        my $id = $m->next_id;
        $m->tickets->{$id} = shift;

        return $id;
    }

    sub find_ticket {
        my $m  = shift;
        my $id = shift;

        return $m->tickets->{$id};
    }
}

{
    package Flat::File;
    use Mojo::Base -base;

    has first_ticket => 10_000;
    has ticket_base  => "tickets";

    ## NOTE: not thread safe
    sub next_id {
        my $m = shift;

        mkdir $m->ticket_base unless -e $m->ticket_base;

        opendir my $dh => $m->ticket_base or die "Unable to open ticket base\n";
        my @tickets = sort grep { !/^\./ } readdir $dh;
        closedir $dh;

        my $next_id = $m->first_ticket + scalar @tickets;
        open my $fh, ">", $m->ticket_base . '/' . $next_id;
        close $fh;

        return $next_id;
    }

    ## NOTE: not thread safe
    sub create_ticket {
        my $m      = shift;
        my $id     = $m->next_id;
        my $ticket = shift;

        open my $fh, ">", $m->ticket_base . '/' . $id
          or die "Unable to create a new ticket\n";
        print $fh Mojo::JSON::encode_json $ticket;
        close $fh;

        return $id;
    }

    sub find_ticket {
        my $m  = shift;
        my $id = shift;

        open my $fh, "<", $m->ticket_base . '/' . $id
          or return;
        my $json = <$fh>;
        chomp $json;
        close $fh;

        return Mojo::JSON::decode_json $json;
    }
}

my $model = Mocky::Mockerson->new;

# my $model = In::Memory->new;
# my $model = Flat::File->new;

helper model => sub { $model };

get '/tickets/:ticket_id' => sub {
    my $c = shift;

    my $ticket = $c->model->find_ticket($c->param('ticket_id'))
      or do {
        $c->render(json => { error => "Ticket not found" }, status => 404);
        return;
      };

    $c->render(json => $ticket, status => 200);
};

post '/tickets' => sub {
    my $c   = shift;
    my $req = $c->req->json;    ## FIXME: validate inputs

    my $ticket_id = $c->model->create_ticket($req)
      or do {
        $c->render(json => { error => "Unable to create ticket" }, status => 400);
        return;
      };

    $c->render(
        json   => { message => "Request received", ticket => $ticket_id, url => $c->url_for("/tickets/$ticket_id")->to_abs },
        status => 201);
};

app->start;
